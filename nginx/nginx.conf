worker_processes 1;

events { worker_connections 1024; }

http {
  # Set the real IP address header
  real_ip_header X-Forwarded-For;

   # Define a custom log format
  log_format custom_format '$remote_addr - $proxy_add_x_forwarded_for [$time_local] '
                              '"$request" $status $body_bytes_sent '
                              '"$http_referer" "$http_user_agent"';

  # Use the custom log format in an access log
  access_log /var/log/nginx/access.log custom_format;

  # Redirect HTTP to HTTPS
  server {
    listen       80;
    listen  [::]:80;

    return 301 https://$host$request_uri;
  }

  # Serve HTTPS requests
  server {
    listen       443 ssl;
    listen  [::]:443 ssl;

    # Define SSL/TLS certificates
    ssl_certificate     ssl.crt;
    ssl_certificate_key ssl.key;

    # Define CORS headers for the location block
    location / {
      if ($request_method = 'OPTIONS') {
        add_header 'Access-Control-Allow-Origin' $http_origin;
        add_header 'Access-Control-Allow-Credentials' 'true';
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT';
        add_header 'Access-Control-Allow-Headers' 'Authorization,DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
        add_header 'Access-Control-Max-Age' 1728000;
        add_header 'Content-Type' 'text/plain; charset=utf-8';
        add_header 'Content-Length' 0;
        return 204;
      }

      add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT';
      add_header 'Access-Control-Allow-Headers' 'Authorization,DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';

      proxy_pass http://aesirx-analytics;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

      large_client_header_buffers 4 32k;
    }
  }
}

